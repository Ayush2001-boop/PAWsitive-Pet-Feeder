{"version":3,"sources":["action.js"],"names":["_axios","_interopRequireDefault","require","serverUrl","login","email","password","dispatch","_ref","data","regeneratorRuntime","async","_context","prev","next","type","awrap","axios","post","concat","headers","sent","console","log","payload","t0","response","message","stop","loadUser","_ref2","_context2","updateIp","ip","_ref3","_context3","header","Content-Type","updatePet","formData","petId","name","hour","minute","cup","_ref4","_context4","put","sendPets","pets","_ref5","_context5","Content-type","removePet","_ref6","_context6","addTask","title","description","_ref7","_context7","ip_address","updateTask","taskId","_ref8","_context8","get","deleteTask","_ref9","_context9","updateProfile","_ref10","_context10","logout","_context11","_ref11","_context12","updatePassword","oldPassword","newPassword","_ref12","_context13","otp","_ref13","_context14","forgetPassword","_ref14","_context15","_ref15","_context16"],"mappings":"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","file":"action.min.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst serverUrl = \"https://meow-meow-feeder.herokuapp.com/api/v1\";\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"loginRequest\" });\r\n\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t`${serverUrl}/login`,\r\n\t\t\t{ email, password },\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t);\r\n\t\tconsole.log(data);\r\n\t\tdispatch({ type: \"loginSuccess\", payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: \"loginFailure\", payload: error.response.data.message });\r\n\t}\r\n};\r\n\r\nexport const loadUser = () => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"loadUserRequest\" });\r\n\r\n\t\tconst { data } = await axios.get(`${serverUrl}/me`);\r\n\t\tdispatch({ type: \"loadUserSuccess\", payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: \"loadUserFailure\", payload: error.response.data.message });\r\n\t}\r\n};\r\n\r\nexport const updateIp = (ip) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"updateIpRequest\" });\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t`${serverUrl}/updateIp`,\r\n\t\t\t{\r\n\t\t\t\tip_address: ip,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theader: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t);\r\n\t\tdispatch({ type: \"updateIpSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"updateIpRequest\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const updatePet = (formData) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"updatePetRequest\" });\r\n\t\tconst { petId, name, hour, minute, cup } = formData;\r\n\t\tconst { data } = await axios.put(\r\n\t\t\t`${serverUrl}/Pet/${petId}`,\r\n\t\t\t{ petId, name, hour, minute, cup },\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tdispatch({ type: \"updatePetSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"updatePetFailure\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const sendPets = (ip, pets) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"sendPetsRequest\" });\r\n\t\tconsole.log(pets);\r\n\t\tconsole.log(`Making api call to ${ip} with ${pets}`);\r\n\t\tconsole.log(\"Send Pet request\");\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t`http://${ip}:3000/runPython`,\r\n\t\t\t{ pets },\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t);\r\n\t\tconsole.log(data);\r\n\t\tdispatch({ type: \"sendPetsSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: \"sendPetsFailure\", payload: error.response.data.message });\r\n\t}\r\n};\r\n\r\nexport const removePet = (petId) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"removePetRequest\" });\r\n\r\n\t\tconst { data } = await axios.delete(`${serverUrl}/Pet/${petId}`);\r\n\t\tdispatch({ type: \"removePetSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"removePetFailure\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const addTask = (title, description) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"addTaskRequest\" });\r\n\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t`${serverUrl}/newtask`,\r\n\t\t\t{\r\n\t\t\t\ttitle,\r\n\t\t\t\tdescription,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t);\r\n\t\tdispatch({ type: \"addTaskSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: \"addTaskFailure\", payload: error.response.data.message });\r\n\t}\r\n};\r\n\r\nexport const updateTask = (taskId) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"updateTaskRequest\" });\r\n\r\n\t\tconst { data } = await axios.get(`${serverUrl}/task/${taskId}`);\r\n\t\tdispatch({ type: \"updateTaskSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"updateTaskFailure\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const deleteTask = (taskId) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"deleteTaskRequest\" });\r\n\r\n\t\tconst { data } = await axios.delete(`${serverUrl}/task/${taskId}`);\r\n\t\tdispatch({ type: \"deleteTaskSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"deleteTaskFailure\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const updateProfile = (formData) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"updateProfileRequest\" });\r\n\r\n\t\tconst { data } = await axios.put(`${serverUrl}/updateprofile`, formData, {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"multipart/form-data\",\r\n\t\t\t},\r\n\t\t});\r\n\t\tdispatch({ type: \"updateProfileSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"updateProfileFailure\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const logout = () => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"logoutRequest\" });\r\n\r\n\t\tawait axios.get(`${serverUrl}/logout`);\r\n\t\tdispatch({ type: \"logoutSuccess\" });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"logoutFailure\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const register = (formData) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"registerRequest\" });\r\n\r\n\t\tconst { data } = await axios.post(`${serverUrl}/register`, formData, {\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"multipart/form-data\",\r\n\t\t\t},\r\n\t\t});\r\n\t\tdispatch({ type: \"registerSuccess\", payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"registerFailure\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const updatePassword =\r\n\t(oldPassword, newPassword) => async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tdispatch({ type: \"updatePasswordRequest\" });\r\n\r\n\t\t\tconst { data } = await axios.put(\r\n\t\t\t\t`${serverUrl}/updatepassword`,\r\n\t\t\t\t{ oldPassword, newPassword },\r\n\t\t\t\t{\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t\t},\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tdispatch({ type: \"updatePasswordSuccess\", payload: data.message });\r\n\t\t} catch (error) {\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: \"updatePasswordFailure\",\r\n\t\t\t\tpayload: error.response.data.message,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\nexport const verify = (otp) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"verificationRequest\" });\r\n\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t`${serverUrl}/verify`,\r\n\t\t\t{ otp },\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tdispatch({ type: \"verificationSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"verificationFailure\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const forgetPassword = (email) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"forgetPasswordRequest\" });\r\n\r\n\t\tconst { data } = await axios.post(\r\n\t\t\t`${serverUrl}/forgetpassword`,\r\n\t\t\t{ email },\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t);\r\n\t\tdispatch({ type: \"forgetPasswordSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"forgetPasswordFailure\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport const resetPassword = (otp, newPassword) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: \"resetPasswordRequest\" });\r\n\r\n\t\tconst { data } = await axios.put(\r\n\t\t\t`${serverUrl}/resetpassword`,\r\n\t\t\t{ otp, newPassword },\r\n\t\t\t{\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tdispatch({ type: \"resetPasswordSuccess\", payload: data.message });\r\n\t} catch (error) {\r\n\t\tdispatch({\r\n\t\t\ttype: \"resetPasswordFailure\",\r\n\t\t\tpayload: error.response.data.message,\r\n\t\t});\r\n\t}\r\n};\r\n"]}